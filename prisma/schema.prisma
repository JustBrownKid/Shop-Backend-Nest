generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model otps {
  id        BigInt   @id @default(autoincrement())
  email     String
  otp       String
  createdAt DateTime @default(now())
}

//?done
model blogs {
  id         BigInt    @id @default(autoincrement())
  title      String    @db.VarChar(255)
  image      String?   @db.VarChar(255)
  content    String
  tag_id     BigInt
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
  tags       tags      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blogs_tag_id_foreign")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

//?done
model categories {
  id         BigInt     @id @default(autoincrement())
  name       String     @db.VarChar(255)
  created_at DateTime   @default(now()) @db.Timestamp(0)
  updated_at DateTime?  @updatedAt @db.Timestamp(0)
  products   products[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

//?done
model hirings {
  id         BigInt    @id @default(autoincrement())
  title      String    @db.VarChar(255)
  sections   Json      @db.Json
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String
  options        String?
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement())
  queue        String @db.VarChar(255)
  payload      String
  attempts     Int    @db.SmallInt
  reserved_at  Int?
  available_at Int
  created_at   Int

  @@index([queue], map: "jobs_queue_index")
}

//?done
model locations {
  id         BigInt    @id @default(autoincrement())
  title      String    @db.VarChar(255)
  address    String
  phone      String    @db.VarChar(30)
  latitude   Decimal?  @db.Decimal(10, 7)
  longitude  Decimal?  @db.Decimal(10, 7)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

model order_items {
  id          BigInt    @id @default(autoincrement())
  order_id    BigInt
  product_id  BigInt
  color_name  String?   @db.VarChar(255)
  color_value String?   @db.VarChar(255)
  quantity    Int       @default(1)
  price       Decimal   @default(0) @db.Decimal(10, 2)
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @updatedAt @db.Timestamp(0)
  orders      orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_order_id_foreign")
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_product_id_foreign")

  @@unique([order_id, product_id, color_name], map: "order_items_order_id_product_id_color_name_unique")
}

//? Done
model orders {
  id          BigInt        @id @default(autoincrement())
  cusName     String        @db.VarChar(255)
  cusPhone    String        @db.VarChar(255)
  address     String        @db.VarChar(255)
  city        String        @db.VarChar(255)
  state       String        @db.VarChar(255)
  note        String?       @db.VarChar(255)
  total_price Decimal       @default(0) @db.Decimal(10, 2)
  status      String        @default("pending") @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  updated_at  DateTime?     @updatedAt @db.Timestamp(0)
  order_items order_items[]
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime  @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @updatedAt @db.Timestamp(0)

  @@index([expires_at], map: "personal_access_tokens_expires_at_index")
  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

//?done
model products {
  id            BigInt        @id @default(autoincrement())
  image         String        @db.VarChar(255)
  title         String        @db.VarChar(255)
  vendor        String        @db.VarChar(255)
  sku           String        @unique(map: "products_sku_unique") @db.VarChar(255)
  stock         String        @db.VarChar(255)
  type          String        @db.VarChar(255)
  category_id   BigInt
  price         Decimal       @db.Decimal(10, 2)
  colors        Json?         @db.Json
  description   Json?         @db.Json
  warranty      Json?         @db.Json
  specification Json?         @db.Json
  created_at    DateTime      @default(now()) @db.Timestamp(0)
  updated_at    DateTime?     @updatedAt @db.Timestamp(0)
  order_items   order_items[]
  categories    categories    @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "products_category_id_foreign")
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt?
  ip_address    String? @db.VarChar(45)
  user_agent    String?
  payload       String
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

//?done
model tags {
  id         BigInt    @id @default(autoincrement())
  name       String    @unique(map: "tags_name_unique") @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime? @updatedAt @db.Timestamp(0)
  blogs      blogs[]
}

//?done
model users {
  id             BigInt    @id @default(autoincrement())
  name           String    @db.VarChar(255)
  email          String    @unique(map: "users_email_unique") @db.VarChar(255)
  password       String    @db.VarChar(255)
  remember_token String?   @db.VarChar(100)
  created_at     DateTime  @default(now()) @db.Timestamp(0)
  updated_at     DateTime? @updatedAt @db.Timestamp(0)
  role           String    @default("user") @db.VarChar(50)
}
